(in-package util.binary)

(eval-when (:compile-toplevel :load-toplevel :execute)

  ;; source: https://www.ibm.com/docs/en/i/7.2?topic=tables-unicode-lowercase-uppercase-conversion-mapping-table

  (defvar *lowercase-uppercase*
    '((#x0061 . #x0041)
      (#x0062 . #x0042)
      (#x0063 . #x0043)
      (#x0064 . #x0044)
      (#x0065 . #x0045)
      (#x0066 . #x0046)
      (#x0067 . #x0047)
      (#x0068 . #x0048)
      (#x0069 . #x0049)
      (#x006A . #x004A)
      (#x006B . #x004B)
      (#x006C . #x004C)
      (#x006D . #x004D)
      (#x006E . #x004E)
      (#x006F . #x004F)
      (#x0070 . #x0050)
      (#x0071 . #x0051)
      (#x0072 . #x0052)
      (#x0073 . #x0053)
      (#x0074 . #x0054)
      (#x0075 . #x0055)
      (#x0076 . #x0056)
      (#x0077 . #x0057)
      (#x0078 . #x0058)
      (#x0079 . #x0059)
      (#x007A . #x005A)
      (#x00E0 . #x00C0)
      (#x00E1 . #x00C1)
      (#x00E2 . #x00C2)
      (#x00E3 . #x00C3)
      (#x00E4 . #x00C4)
      (#x00E5 . #x00C5)
      (#x00E6 . #x00C6)
      (#x00E7 . #x00C7)
      (#x00E8 . #x00C8)
      (#x00E9 . #x00C9)
      (#x00EA . #x00CA)
      (#x00EB . #x00CB)
      (#x00EC . #x00CC)
      (#x00ED . #x00CD)
      (#x00EE . #x00CE)
      (#x00EF . #x00CF)
      (#x00F0 . #x00D0)
      (#x00F1 . #x00D1)
      (#x00F2 . #x00D2)
      (#x00F3 . #x00D3)
      (#x00F4 . #x00D4)
      (#x00F5 . #x00D5)
      (#x00F6 . #x00D6)
      (#x00F8 . #x00D8)
      (#x00F9 . #x00D9)
      (#x00FA . #x00DA)
      (#x00FB . #x00DB)
      (#x00FC . #x00DC)
      (#x00FD . #x00DD)
      (#x00FE . #x00DE)
      (#x00FF . #x0178)
      (#x0101 . #x0100)
      (#x0103 . #x0102)
      (#x0105 . #x0104)
      (#x0107 . #x0106)
      (#x0109 . #x0108)
      (#x010B . #x010A)
      (#x010D . #x010C)
      (#x010F . #x010E)
      (#x0111 . #x0110)
      (#x0113 . #x0112)
      (#x0115 . #x0114)
      (#x0117 . #x0116)
      (#x0119 . #x0118)
      (#x011B . #x011A)
      (#x011D . #x011C)
      (#x011F . #x011E)
      (#x0121 . #x0120)
      (#x0123 . #x0122)
      (#x0125 . #x0124)
      (#x0127 . #x0126)
      (#x0129 . #x0128)
      (#x012B . #x012A)
      (#x012D . #x012C)
      (#x012F . #x012E)
      (#x0131 . #x0049)
      (#x0133 . #x0132)
      (#x0135 . #x0134)
      (#x0137 . #x0136)
      (#x013A . #x0139)
      (#x013C . #x013B)
      (#x013E . #x013D)
      (#x0140 . #x013F)
      (#x0142 . #x0141)
      (#x0144 . #x0143)
      (#x0146 . #x0145)
      (#x0148 . #x0147)
      (#x014B . #x014A)
      (#x014D . #x014C)
      (#x014F . #x014E)
      (#x0151 . #x0150)
      (#x0153 . #x0152)
      (#x0155 . #x0154)
      (#x0157 . #x0156)
      (#x0159 . #x0158)
      (#x015B . #x015A)
      (#x015D . #x015C)
      (#x015F . #x015E)
      (#x0161 . #x0160)
      (#x0163 . #x0162)
      (#x0165 . #x0164)
      (#x0167 . #x0166)
      (#x0169 . #x0168)
      (#x016B . #x016A)
      (#x016D . #x016C)
      (#x016F . #x016E)
      (#x0171 . #x0170)
      (#x0173 . #x0172)
      (#x0175 . #x0174)
      (#x0177 . #x0176)
      (#x017A . #x0179)
      (#x017C . #x017B)
      (#x017E . #x017D)
      (#x0183 . #x0182)
      (#x0185 . #x0184)
      (#x0188 . #x0187)
      (#x018C . #x018B)
      (#x0192 . #x0191)
      (#x0199 . #x0198)
      (#x01A1 . #x01A0)
      (#x01A3 . #x01A2)
      (#x01A5 . #x01A4)
      (#x01A8 . #x01A7)
      (#x01AD . #x01AC)
      (#x01B0 . #x01AF)
      (#x01B4 . #x01B3)
      (#x01B6 . #x01B5)
      (#x01B9 . #x01B8)
      (#x01BD . #x01BC)
      (#x01C6 . #x01C4)
      (#x01C9 . #x01C7)
      (#x01CC . #x01CA)
      (#x01CE . #x01CD)
      (#x01D0 . #x01CF)
      (#x01D2 . #x01D1)
      (#x01D4 . #x01D3)
      (#x01D6 . #x01D5)
      (#x01D8 . #x01D7)
      (#x01DA . #x01D9)
      (#x01DC . #x01DB)
      (#x01DF . #x01DE)
      (#x01E1 . #x01E0)
      (#x01E3 . #x01E2)
      (#x01E5 . #x01E4)
      (#x01E7 . #x01E6)
      (#x01E9 . #x01E8)
      (#x01EB . #x01EA)
      (#x01ED . #x01EC)
      (#x01EF . #x01EE)
      (#x01F3 . #x01F1)
      (#x01F5 . #x01F4)
      (#x01FB . #x01FA)
      (#x01FD . #x01FC)
      (#x01FF . #x01FE)
      (#x0201 . #x0200)
      (#x0203 . #x0202)
      (#x0205 . #x0204)
      (#x0207 . #x0206)
      (#x0209 . #x0208)
      (#x020B . #x020A)
      (#x020D . #x020C)
      (#x020F . #x020E)
      (#x0211 . #x0210)
      (#x0213 . #x0212)
      (#x0215 . #x0214)
      (#x0217 . #x0216)
      (#x0253 . #x0181)
      (#x0254 . #x0186)
      (#x0257 . #x018A)
      (#x0258 . #x018E)
      (#x0259 . #x018F)
      (#x025B . #x0190)
      (#x0260 . #x0193)
      (#x0263 . #x0194)
      (#x0268 . #x0197)
      (#x0269 . #x0196)
      (#x026F . #x019C)
      (#x0272 . #x019D)
      (#x0275 . #x019F)
      (#x0283 . #x01A9)
      (#x0288 . #x01AE)
      (#x028A . #x01B1)
      (#x028B . #x01B2)
      (#x0292 . #x01B7)
      (#x03AC . #x0386)
      (#x03AD . #x0388)
      (#x03AE . #x0389)
      (#x03AF . #x038A)
      (#x03B1 . #x0391)
      (#x03B2 . #x0392)
      (#x03B3 . #x0393)
      (#x03B4 . #x0394)
      (#x03B5 . #x0395)
      (#x03B6 . #x0396)
      (#x03B7 . #x0397)
      (#x03B8 . #x0398)
      (#x03B9 . #x0399)
      (#x03BA . #x039A)
      (#x03BB . #x039B)
      (#x03BC . #x039C)
      (#x03BD . #x039D)
      (#x03BE . #x039E)
      (#x03BF . #x039F)
      (#x03C0 . #x03A0)
      (#x03C1 . #x03A1)
      (#x03C3 . #x03A3)
      (#x03C4 . #x03A4)
      (#x03C5 . #x03A5)
      (#x03C6 . #x03A6)
      (#x03C7 . #x03A7)
      (#x03C8 . #x03A8)
      (#x03C9 . #x03A9)
      (#x03CA . #x03AA)
      (#x03CB . #x03AB)
      (#x03CC . #x038C)
      (#x03CD . #x038E)
      (#x03CE . #x038F)
      (#x03E3 . #x03E2)
      (#x03E5 . #x03E4)
      (#x03E7 . #x03E6)
      (#x03E9 . #x03E8)
      (#x03EB . #x03EA)
      (#x03ED . #x03EC)
      (#x03EF . #x03EE)
      (#x0430 . #x0410)
      (#x0431 . #x0411)
      (#x0432 . #x0412)
      (#x0433 . #x0413)
      (#x0434 . #x0414)
      (#x0435 . #x0415)
      (#x0436 . #x0416)
      (#x0437 . #x0417)
      (#x0438 . #x0418)
      (#x0439 . #x0419)
      (#x043A . #x041A)
      (#x043B . #x041B)
      (#x043C . #x041C)
      (#x043D . #x041D)
      (#x043E . #x041E)
      (#x043F . #x041F)
      (#x0440 . #x0420)
      (#x0441 . #x0421)
      (#x0442 . #x0422)
      (#x0443 . #x0423)
      (#x0444 . #x0424)
      (#x0445 . #x0425)
      (#x0446 . #x0426)
      (#x0447 . #x0427)
      (#x0448 . #x0428)
      (#x0449 . #x0429)
      (#x044A . #x042A)
      (#x044B . #x042B)
      (#x044C . #x042C)
      (#x044D . #x042D)
      (#x044E . #x042E)
      (#x044F . #x042F)
      (#x0451 . #x0401)
      (#x0452 . #x0402)
      (#x0453 . #x0403)
      (#x0454 . #x0404)
      (#x0455 . #x0405)
      (#x0456 . #x0406)
      (#x0457 . #x0407)
      (#x0458 . #x0408)
      (#x0459 . #x0409)
      (#x045A . #x040A)
      (#x045B . #x040B)
      (#x045C . #x040C)
      (#x045E . #x040E)
      (#x045F . #x040F)
      (#x0461 . #x0460)
      (#x0463 . #x0462)
      (#x0465 . #x0464)
      (#x0467 . #x0466)
      (#x0469 . #x0468)
      (#x046B . #x046A)
      (#x046D . #x046C)
      (#x046F . #x046E)
      (#x0471 . #x0470)
      (#x0473 . #x0472)
      (#x0475 . #x0474)
      (#x0477 . #x0476)
      (#x0479 . #x0478)
      (#x047B . #x047A)
      (#x047D . #x047C)
      (#x047F . #x047E)
      (#x0481 . #x0480)
      (#x0491 . #x0490)
      (#x0493 . #x0492)
      (#x0495 . #x0494)
      (#x0497 . #x0496)
      (#x0499 . #x0498)
      (#x049B . #x049A)
      (#x049D . #x049C)
      (#x049F . #x049E)
      (#x04A1 . #x04A0)
      (#x04A3 . #x04A2)
      (#x04A5 . #x04A4)
      (#x04A7 . #x04A6)
      (#x04A9 . #x04A8)
      (#x04AB . #x04AA)
      (#x04AD . #x04AC)
      (#x04AF . #x04AE)
      (#x04B1 . #x04B0)
      (#x04B3 . #x04B2)
      (#x04B5 . #x04B4)
      (#x04B7 . #x04B6)
      (#x04B9 . #x04B8)
      (#x04BB . #x04BA)
      (#x04BD . #x04BC)
      (#x04BF . #x04BE)
      (#x04C2 . #x04C1)
      (#x04C4 . #x04C3)
      (#x04C8 . #x04C7)
      (#x04CC . #x04CB)
      (#x04D1 . #x04D0)
      (#x04D3 . #x04D2)
      (#x04D5 . #x04D4)
      (#x04D7 . #x04D6)
      (#x04D9 . #x04D8)
      (#x04DB . #x04DA)
      (#x04DD . #x04DC)
      (#x04DF . #x04DE)
      (#x04E1 . #x04E0)
      (#x04E3 . #x04E2)
      (#x04E5 . #x04E4)
      (#x04E7 . #x04E6)
      (#x04E9 . #x04E8)
      (#x04EB . #x04EA)
      (#x04EF . #x04EE)
      (#x04F1 . #x04F0)
      (#x04F3 . #x04F2)
      (#x04F5 . #x04F4)
      (#x04F9 . #x04F8)
      (#x0561 . #x0531)
      (#x0562 . #x0532)
      (#x0563 . #x0533)
      (#x0564 . #x0534)
      (#x0565 . #x0535)
      (#x0566 . #x0536)
      (#x0567 . #x0537)
      (#x0568 . #x0538)
      (#x0569 . #x0539)
      (#x056A . #x053A)
      (#x056B . #x053B)
      (#x056C . #x053C)
      (#x056D . #x053D)
      (#x056E . #x053E)
      (#x056F . #x053F)
      (#x0570 . #x0540)
      (#x0571 . #x0541)
      (#x0572 . #x0542)
      (#x0573 . #x0543)
      (#x0574 . #x0544)
      (#x0575 . #x0545)
      (#x0576 . #x0546)
      (#x0577 . #x0547)
      (#x0578 . #x0548)
      (#x0579 . #x0549)
      (#x057A . #x054A)
      (#x057B . #x054B)
      (#x057C . #x054C)
      (#x057D . #x054D)
      (#x057E . #x054E)
      (#x057F . #x054F)
      (#x0580 . #x0550)
      (#x0581 . #x0551)
      (#x0582 . #x0552)
      (#x0583 . #x0553)
      (#x0584 . #x0554)
      (#x0585 . #x0555)
      (#x0586 . #x0556)
      (#x10D0 . #x10A0)
      (#x10D1 . #x10A1)
      (#x10D2 . #x10A2)
      (#x10D3 . #x10A3)
      (#x10D4 . #x10A4)
      (#x10D5 . #x10A5)
      (#x10D6 . #x10A6)
      (#x10D7 . #x10A7)
      (#x10D8 . #x10A8)
      (#x10D9 . #x10A9)
      (#x10DA . #x10AA)
      (#x10DB . #x10AB)
      (#x10DC . #x10AC)
      (#x10DD . #x10AD)
      (#x10DE . #x10AE)
      (#x10DF . #x10AF)
      (#x10E0 . #x10B0)
      (#x10E1 . #x10B1)
      (#x10E2 . #x10B2)
      (#x10E3 . #x10B3)
      (#x10E4 . #x10B4)
      (#x10E5 . #x10B5)
      (#x10E6 . #x10B6)
      (#x10E7 . #x10B7)
      (#x10E8 . #x10B8)
      (#x10E9 . #x10B9)
      (#x10EA . #x10BA)
      (#x10EB . #x10BB)
      (#x10EC . #x10BC)
      (#x10ED . #x10BD)
      (#x10EE . #x10BE)
      (#x10EF . #x10BF)
      (#x10F0 . #x10C0)
      (#x10F1 . #x10C1)
      (#x10F2 . #x10C2)
      (#x10F3 . #x10C3)
      (#x10F4 . #x10C4)
      (#x10F5 . #x10C5)
      (#x1E01 . #x1E00)
      (#x1E03 . #x1E02)
      (#x1E05 . #x1E04)
      (#x1E07 . #x1E06)
      (#x1E09 . #x1E08)
      (#x1E0B . #x1E0A)
      (#x1E0D . #x1E0C)
      (#x1E0F . #x1E0E)
      (#x1E11 . #x1E10)
      (#x1E13 . #x1E12)
      (#x1E15 . #x1E14)
      (#x1E17 . #x1E16)
      (#x1E19 . #x1E18)
      (#x1E1B . #x1E1A)
      (#x1E1D . #x1E1C)
      (#x1E1F . #x1E1E)
      (#x1E21 . #x1E20)
      (#x1E23 . #x1E22)
      (#x1E25 . #x1E24)
      (#x1E27 . #x1E26)
      (#x1E29 . #x1E28)
      (#x1E2B . #x1E2A)
      (#x1E2D . #x1E2C)
      (#x1E2F . #x1E2E)
      (#x1E31 . #x1E30)
      (#x1E33 . #x1E32)
      (#x1E35 . #x1E34)
      (#x1E37 . #x1E36)
      (#x1E39 . #x1E38)
      (#x1E3B . #x1E3A)
      (#x1E3D . #x1E3C)
      (#x1E3F . #x1E3E)
      (#x1E41 . #x1E40)
      (#x1E43 . #x1E42)
      (#x1E45 . #x1E44)
      (#x1E47 . #x1E46)
      (#x1E49 . #x1E48)
      (#x1E4B . #x1E4A)
      (#x1E4D . #x1E4C)
      (#x1E4F . #x1E4E)
      (#x1E51 . #x1E50)
      (#x1E53 . #x1E52)
      (#x1E55 . #x1E54)
      (#x1E57 . #x1E56)
      (#x1E59 . #x1E58)
      (#x1E5B . #x1E5A)
      (#x1E5D . #x1E5C)
      (#x1E5F . #x1E5E)
      (#x1E61 . #x1E60)
      (#x1E63 . #x1E62)
      (#x1E65 . #x1E64)
      (#x1E67 . #x1E66)
      (#x1E69 . #x1E68)
      (#x1E6B . #x1E6A)
      (#x1E6D . #x1E6C)
      (#x1E6F . #x1E6E)
      (#x1E71 . #x1E70)
      (#x1E73 . #x1E72)
      (#x1E75 . #x1E74)
      (#x1E77 . #x1E76)
      (#x1E79 . #x1E78)
      (#x1E7B . #x1E7A)
      (#x1E7D . #x1E7C)
      (#x1E7F . #x1E7E)
      (#x1E81 . #x1E80)
      (#x1E83 . #x1E82)
      (#x1E85 . #x1E84)
      (#x1E87 . #x1E86)
      (#x1E89 . #x1E88)
      (#x1E8B . #x1E8A)
      (#x1E8D . #x1E8C)
      (#x1E8F . #x1E8E)
      (#x1E91 . #x1E90)
      (#x1E93 . #x1E92)
      (#x1E95 . #x1E94)
      (#x1EA1 . #x1EA0)
      (#x1EA3 . #x1EA2)
      (#x1EA5 . #x1EA4)
      (#x1EA7 . #x1EA6)
      (#x1EA9 . #x1EA8)
      (#x1EAB . #x1EAA)
      (#x1EAD . #x1EAC)
      (#x1EAF . #x1EAE)
      (#x1EB1 . #x1EB0)
      (#x1EB3 . #x1EB2)
      (#x1EB5 . #x1EB4)
      (#x1EB7 . #x1EB6)
      (#x1EB9 . #x1EB8)
      (#x1EBB . #x1EBA)
      (#x1EBD . #x1EBC)
      (#x1EBF . #x1EBE)
      (#x1EC1 . #x1EC0)
      (#x1EC3 . #x1EC2)
      (#x1EC5 . #x1EC4)
      (#x1EC7 . #x1EC6)
      (#x1EC9 . #x1EC8)
      (#x1ECB . #x1ECA)
      (#x1ECD . #x1ECC)
      (#x1ECF . #x1ECE)
      (#x1ED1 . #x1ED0)
      (#x1ED3 . #x1ED2)
      (#x1ED5 . #x1ED4)
      (#x1ED7 . #x1ED6)
      (#x1ED9 . #x1ED8)
      (#x1EDB . #x1EDA)
      (#x1EDD . #x1EDC)
      (#x1EDF . #x1EDE)
      (#x1EE1 . #x1EE0)
      (#x1EE3 . #x1EE2)
      (#x1EE5 . #x1EE4)
      (#x1EE7 . #x1EE6)
      (#x1EE9 . #x1EE8)
      (#x1EEB . #x1EEA)
      (#x1EED . #x1EEC)
      (#x1EEF . #x1EEE)
      (#x1EF1 . #x1EF0)
      (#x1EF3 . #x1EF2)
      (#x1EF5 . #x1EF4)
      (#x1EF7 . #x1EF6)
      (#x1EF9 . #x1EF8)
      (#x1F00 . #x1F08)
      (#x1F01 . #x1F09)
      (#x1F02 . #x1F0A)
      (#x1F03 . #x1F0B)
      (#x1F04 . #x1F0C)
      (#x1F05 . #x1F0D)
      (#x1F06 . #x1F0E)
      (#x1F07 . #x1F0F)
      (#x1F10 . #x1F18)
      (#x1F11 . #x1F19)
      (#x1F12 . #x1F1A)
      (#x1F13 . #x1F1B)
      (#x1F14 . #x1F1C)
      (#x1F15 . #x1F1D)
      (#x1F20 . #x1F28)
      (#x1F21 . #x1F29)
      (#x1F22 . #x1F2A)
      (#x1F23 . #x1F2B)
      (#x1F24 . #x1F2C)
      (#x1F25 . #x1F2D)
      (#x1F26 . #x1F2E)
      (#x1F27 . #x1F2F)
      (#x1F30 . #x1F38)
      (#x1F31 . #x1F39)
      (#x1F32 . #x1F3A)
      (#x1F33 . #x1F3B)
      (#x1F34 . #x1F3C)
      (#x1F35 . #x1F3D)
      (#x1F36 . #x1F3E)
      (#x1F37 . #x1F3F)
      (#x1F40 . #x1F48)
      (#x1F41 . #x1F49)
      (#x1F42 . #x1F4A)
      (#x1F43 . #x1F4B)
      (#x1F44 . #x1F4C)
      (#x1F45 . #x1F4D)
      (#x1F51 . #x1F59)
      (#x1F53 . #x1F5B)
      (#x1F55 . #x1F5D)
      (#x1F57 . #x1F5F)
      (#x1F60 . #x1F68)
      (#x1F61 . #x1F69)
      (#x1F62 . #x1F6A)
      (#x1F63 . #x1F6B)
      (#x1F64 . #x1F6C)
      (#x1F65 . #x1F6D)
      (#x1F66 . #x1F6E)
      (#x1F67 . #x1F6F)
      (#x1F80 . #x1F88)
      (#x1F81 . #x1F89)
      (#x1F82 . #x1F8A)
      (#x1F83 . #x1F8B)
      (#x1F84 . #x1F8C)
      (#x1F85 . #x1F8D)
      (#x1F86 . #x1F8E)
      (#x1F87 . #x1F8F)
      (#x1F90 . #x1F98)
      (#x1F91 . #x1F99)
      (#x1F92 . #x1F9A)
      (#x1F93 . #x1F9B)
      (#x1F94 . #x1F9C)
      (#x1F95 . #x1F9D)
      (#x1F96 . #x1F9E)
      (#x1F97 . #x1F9F)
      (#x1FA0 . #x1FA8)
      (#x1FA1 . #x1FA9)
      (#x1FA2 . #x1FAA)
      (#x1FA3 . #x1FAB)
      (#x1FA4 . #x1FAC)
      (#x1FA5 . #x1FAD)
      (#x1FA6 . #x1FAE)
      (#x1FA7 . #x1FAF)
      (#x1FB0 . #x1FB8)
      (#x1FB1 . #x1FB9)
      (#x1FD0 . #x1FD8)
      (#x1FD1 . #x1FD9)
      (#x1FE0 . #x1FE8)
      (#x1FE1 . #x1FE9)
      (#x24D0 . #x24B6)
      (#x24D1 . #x24B7)
      (#x24D2 . #x24B8)
      (#x24D3 . #x24B9)
      (#x24D4 . #x24BA)
      (#x24D5 . #x24BB)
      (#x24D6 . #x24BC)
      (#x24D7 . #x24BD)
      (#x24D8 . #x24BE)
      (#x24D9 . #x24BF)
      (#x24DA . #x24C0)
      (#x24DB . #x24C1)
      (#x24DC . #x24C2)
      (#x24DD . #x24C3)
      (#x24DE . #x24C4)
      (#x24DF . #x24C5)
      (#x24E0 . #x24C6)
      (#x24E1 . #x24C7)
      (#x24E2 . #x24C8)
      (#x24E3 . #x24C9)
      (#x24E4 . #x24CA)
      (#x24E5 . #x24CB)
      (#x24E6 . #x24CC)
      (#x24E7 . #x24CD)
      (#x24E8 . #x24CE)
      (#x24E9 . #x24CF)
      (#xFF41 . #xFF21)
      (#xFF42 . #xFF22)
      (#xFF43 . #xFF23)
      (#xFF44 . #xFF24)
      (#xFF45 . #xFF25)
      (#xFF46 . #xFF26)
      (#xFF47 . #xFF27)
      (#xFF48 . #xFF28)
      (#xFF49 . #xFF29)
      (#xFF4A . #xFF2A)
      (#xFF4B . #xFF2B)
      (#xFF4C . #xFF2C)
      (#xFF4D . #xFF2D)
      (#xFF4E . #xFF2E)
      (#xFF4F . #xFF2F)
      (#xFF50 . #xFF30)
      (#xFF51 . #xFF31)
      (#xFF52 . #xFF32)
      (#xFF53 . #xFF33)
      (#xFF54 . #xFF34)
      (#xFF55 . #xFF35)
      (#xFF56 . #xFF36)
      (#xFF57 . #xFF37)
      (#xFF58 . #xFF38)
      (#xFF59 . #xFF39)
      (#xFF5A . #xFF3A)))


  (defvar *lowercase* (make-hash-table :size 333))

  (defvar *uppercase* (make-hash-table :size 333)))

(loop
  for (a . b) in *lowercase-uppercase*
  do (setf (gethash a *lowercase*) b
	   (gethash b *uppercase*) a))
  

(declaim (ftype (function ((unsigned-byte 8)) boolean)
		whitespacep
		uppercasep
		lowercasep)
	 (inline whitespacep
		 uppercasep
		 lowercasep))


(define-condition binary-op-error (simple-error)
  ((offender :initarg :offender :initform nil :reader offender)))

(defun binary-op-error (offender format-control &rest format-args)
  (error 'binary-op-error
	 :offender offender
	 :format-control format-control
	 :format-arguments format-args))

(defun whitespacep (byte)
  "Predicate that returns T if the byte represents a
whitespace or line-ending character."
  (declare (optimize (speed 3) (safety 0)))
  (or (= byte #.(char-code #\space))
      (= byte #.(char-code #\tab))
      (= byte #.(char-code #\newline))
      (= byte #.(char-code #\linefeed))
      (= byte #.(char-code #\return))))

(defun uppercasep (byte)
  "Predicate that returns T if the byte represents an
uppercase character."
  (declare (optimize (speed 3) (safety 0)))
  (nth-value 1 (gethash byte *uppercase*)))

(defun lowercasep (byte)
  "Predicate that returns T if the byte represents an
lowercase character."
  (declare (optimize (speed 3) (safety 0)))
  (nth-value 1 (gethash byte *lowercase*)))



(declaim (ftype (function ((unsigned-byte 8)) (unsigned-byte 8)) get-lowercase get-uppercase)
	 (inline get-lowercase get-uppercase))

(defun get-lowercase (byte)
  "If byte represents an uppercase character, return the byte
representing its lowercase corollary. If already lowercase or 
there is no applicable lowercase return the byte."
  (declare (optimize (speed 3) (safety 0)))
  (or (gethash byte *uppercase*) byte))

(defun get-uppercase (byte)
  "If byte represents a lowercase character, return the byte
representing its uppercase corollary. If already uppercase or
there is no applicable uppercase return the byte."
  (declare (optimize (speed 3) (safety 0)))
  (or (gethash byte *lowercase*) byte))



(declaim (ftype (function (character) fixnum) hex-char-to-decimal)
	 (inline hex-char-to-decimal))
	 
(defun hex-char-to-decimal (hex)
  "Convert hexadecimal character to its decimal equivalent. Output is a number."
  (declare (optimize (speed 3) (safety 0)))
  (let ((number (digit-char-p hex)))
    (the fixnum
	 (cond ((and number (< number 10))
		number)
	       (number
		(binary-op-error number
				 "~s is not a hex character. Must correspond to a positive integer less than 10"
				 number))
	       (t (case hex
		    ((#\a #\A) 10)
		    ((#\b #\B) 11)
		    ((#\c #\C) 12)
		    ((#\d #\D) 13)
		    ((#\e #\E) 14)
		    ((#\f #\F) 15)
		    (t (binary-op-error hex
					"~s is not a hex character. Must correspond to [a-fA-F0-9]."
					hex))))))))


(declaim (ftype (function (string) simple-array) parse-hex-string)
	 (inline parse-hex-string))

(defun parse-hex-string (hex)
  "Parse a hexadecimal string to optional element-type. Defaults
to unsigned-byte 8."
  (declare (optimize (speed 3) (safety 0)))
  (make-array (/ (length hex) 2)
	      :element-type '(unsigned-byte 8)
	      :initial-contents 
	      (loop
		for i from 0 below (length hex)
		when (evenp i)
		collect (+ (* 16 (hex-char-to-decimal (char hex i)))
			   (hex-char-to-decimal (char hex (1+ i)))))))



(declaim (inline string-to-octets octets-to-string))

(defun string-to-octets
    (string &rest rest &key (external-format :default) (start 0) end &allow-other-keys)
  "Compatability function that first calls an implementations definition
before falling back on flexi-streams."
  (declare (ignore external-format start end))
  #+:sbcl
  (apply #'sb-ext:string-to-octets string rest)
  #+:cmucl
  (apply #'ext:string-to-octets string rest)
  #+:allegro
  (apply #'excl:string-to-octets string rest)
  #+:ccl
  (apply #'ccl:encode-string-to-octets string rest)
  #-(or :allegro :sbcl :cmucl :ccl)
  (apply #'babel:string-to-octets string rest))

(defun octets-to-string
    (octets &rest rest &key (external-format :default) (start 0) (end (length octets)) &allow-other-keys)
  "Compatability function that first calls an implementations definition
before falling back on flexi-streams."
  (declare (ignore external-format start end))
  #+:sbcl
  (apply #'sb-ext:octets-to-string octets rest)
  #+:cmucl
  (apply #'ext:octets-to-string octets rest)
  #+:allegro
  (apply #'excl:octets-to-string octets rest)
  #+:ccl
  (apply #'ccl:encode-octets-to-string octets rest)
  #-(or :allegro :sbcl :cmucl :ccl)
  (apply #'babel:octets-to-string octets rest))
